// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationsType {
  CHURCH
  SCHOOL
  COMPANY
}

enum EventCategory {
  RECURRING
  SPECIAL
}

model Organizations {
  id String @id @default(uuid())
  name String
  type OrganizationsType
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  attendees Attendees[]
  events Events[]
  attendance Attendance[]

  @@map("organizations")
}

model Attendees {
  id String @id @default(uuid())
  firstName String @map("first_name")
  lastName String @map("last_name")
  embedding Unsupported("vector(512)")?
  age Int?
  email String?
  status String?
  address String?
  birthday String?
  facebookName String? @map("facebook_name")
  facebookLink String? @map("facebook_link")
  cellLeader String? @map("cell_leader")
  primaryLeader String? @map("primary_leader")
  network String?
  churchHierarchy String? @map("church_hierarchy")
  memberStatus String? @map("member_status")
  churchProcess String? @map("church_process")
  gradeLevel String? @map("grade_level")
  section String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organizationId String @map("organization_id")
  organization Organizations @relation(fields: [organizationId], references: [id])

  attendance Attendance[]
  eventRegistrations EventRegistrations[]

  @@unique([firstName, lastName])
  @@map("attendees")
}

model Events {
  id String @id @default(uuid())
  name String?
  image String
  description String
  tagline String
  location String
  category EventCategory
  startDate DateTime? @map("start_date")
  endDate DateTime? @map("end_date")
  startTime DateTime @map("start_time")
  endTime DateTime @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organizationId String @map("organization_id")
  organization Organizations @relation(fields: [organizationId], references: [id])

  events Attendance[]
  eventRegistrations EventRegistrations[]

  @@map("events")
}

model Attendance {
  id String @id @default(uuid())
  timeIn DateTime @map("time_in")
  timeOut DateTime? @map("time_out")
  presenceDuration Int? @map("presence_duration")
  weekNumber Int @map("week_number")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  attendeeId String @map("attendee_id")
  attendee Attendees @relation(fields: [attendeeId], references: [id])

  eventRegistrationId String? @map("event_registration_id")
  eventRegistration EventRegistrations? @relation(fields: [eventRegistrationId], references: [id])

  eventId String? @map("event_id")
  event Events? @relation(fields: [eventId], references: [id])

  organizationId String @map("organization_id")
  organization Organizations @relation(fields: [organizationId], references: [id])

  @@map("attendance")
}

model EventRegistrations {
  id String @id @default(uuid())
  invitedBy String? @map("invited_by")

  eventId String @map("event_id")
  event Events @relation(fields: [eventId], references: [id])

  attendeeId String @map("attendee_id")
  attendee Attendees @relation(fields: [attendeeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  attendance Attendance[]

  @@unique([attendeeId, eventId])
  @@map("event_registrations")
}